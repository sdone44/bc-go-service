package main

import (
	"bytes"
	"database/sql"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	_ "github.com/go-sql-driver/mysql"
	"github.com/joho/godotenv"
)

type JSONRPCRequest struct {
	Jsonrpc string        `json:"jsonrpc"`
	Method  string        `json:"method"`
	Params  []interface{} `json:"params"`
	Id      int           `json:"id"`
}

type JSONRPCResponse struct {
	Result json.RawMessage `json:"result"`
	Error  interface{}     `json:"error"`
	Id     int             `json:"id"`
}

type BlockInfo struct {
	Hash         string        `json:"hash"`
	Number       int           `json:"number"`
	Transactions []Transaction `json:"transactions"`
}

type Transaction struct {
	BlockLimit int    `json:"blockLimit"`
	ChainID    string `json:"chainID"`
	ExtraData  string `json:"extraData"`
	From       string `json:"from"`
	GroupID    string `json:"groupID"`
	Hash       string `json:"hash"`
	ImportTime int64  `json:"importTime"`
	Input      string `json:"input"`
	To         string `json:"to"`
}

func synBlockTask(block_num int) {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Failed to load .env file:", err)
	}

	// DB
	dbase := os.Getenv("DB_DATABASE")
	// prefix := os.Getenv("DB_PREFIX")
	username := os.Getenv("DB_USERNAME")
	password := os.Getenv("DB_PASSWORD")
	port := os.Getenv("DB_PORT")
	host := os.Getenv("DB_HOST")
	// Contract
	url := os.Getenv("RPC_URL")
	abiStr := os.Getenv("CONTRACT_ABI")
	contractAddress := os.Getenv("CONTRACT_ADDRESS")
	contractMethodId := os.Getenv("CONTRACT_METHOD_SHARADATE")

	// 加载合约
	abi, err := abi.JSON(strings.NewReader(abiStr))
	if err != nil {
		log.Fatal(err)
	}
	// 数据库连接
	dsn := username + ":" + password + "@tcp" + "(" + host + ":" + port + ")/" + dbase
	db, err := sql.Open("mysql", dsn)
	if err != nil {
		panic(err.Error())
	}
	defer db.Close()

	// 构建请求体
	requestData := JSONRPCRequest{
		Jsonrpc: "2.0",
		Method:  "getBlockByNumber",
		Params: []interface{}{
			"group0",
			"",
			block_num,
			false,
			false,
		},
		Id: 1,
	}
	requestBody, err := json.Marshal(requestData)
	if err != nil {
		fmt.Println("Failed to marshal request data:", err)
		return
	}

	// 发送 POST 请求
	response, err := http.Post(url, "application/json", bytes.NewBuffer(requestBody))
	if err != nil {
		fmt.Println("Failed to send request:", err)
		return
	}
	defer response.Body.Close()

	// 读取响应数据
	responseBody, err := ioutil.ReadAll(response.Body)
	if err != nil {
		fmt.Println("Failed to read response body:", err)
		return
	}

	// 解析响应数据
	var jsonResponse JSONRPCResponse
	err = json.Unmarshal(responseBody, &jsonResponse)
	if err != nil {
		fmt.Println("Failed to unmarshal response body:", err)
		return
	}
	fmt.Println("Response status code:", response.StatusCode)

	// 解析 result 字段，获取 hash、number 和 transactions
	var blockInfo BlockInfo
	err = json.Unmarshal(jsonResponse.Result, &blockInfo)
	if err != nil {
		fmt.Println("Failed to unmarshal result field:", err)
		return
	}

	// 输出解析结果
	fmt.Println("Hash:", blockInfo.Hash)
	fmt.Println("Number:", blockInfo.Number)
	fmt.Println("Transactions:")
	for _, tx := range blockInfo.Transactions {
		fmt.Printf(" - Hash: %s\n", tx.Hash)
		fmt.Printf("   From: %s\n", tx.From)
		fmt.Printf("   To: %s\n", tx.To)
		// fmt.Printf("   Input: %s\n", tx.Input)
		decode_input := ""
		is_contract := 0
		method_id := ""
		if tx.To == contractAddress {
			// 获取合约方法id
			is_contract = 1
			method_id = tx.Input[2:10]
			decodedSig, err := hex.DecodeString(method_id)
			if err != nil {
				log.Fatal(err)
			}
			if method_id == contractMethodId {
				// 加载合约方法
				method, err := abi.MethodById(decodedSig)
				if err != nil {
					log.Fatal(err)
				}
				decodedData, err := hex.DecodeString(tx.Input[10:])
				if err != nil {
					log.Fatal(err)
				}
				re, err := method.Inputs.Unpack(decodedData)
				if err != nil {
					// fmt.Printf("解码失败：%v\n", err)
					log.Fatal(err)
				}
				jsonData, err := json.Marshal(re)
				if err != nil {
					// fmt.Printf("转换为JSON失败：%v\n", err)
					log.Fatal(err)
				}
				decode_input = string(jsonData)
			}

		}

		_, err = db.Exec("INSERT INTO bc_block_transactions (block_num, trans_hash, `from`, `to`, input, decode_input, is_contract, method_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
			blockInfo.Number, tx.Hash, tx.From, tx.To, tx.Input, decode_input, is_contract, method_id)
		if err != nil {
			fmt.Printf("区块[%v]交易存储失败：%v\n", blockInfo.Number, tx.Hash)
			log.Fatal(err)
		}
	}

	// 插入区块信息到数据库
	txJSON, err := json.Marshal(blockInfo.Transactions)
	if err != nil {
		log.Fatal(err)
	}
	_, err = db.Exec("INSERT INTO bc_block_number (block_num, block_hash, block_transactions, response_code, status) VALUES (?, ?, ?, ?, ?)",
		blockInfo.Number, blockInfo.Hash, string(txJSON), response.StatusCode, 1)
	if err != nil {
		fmt.Printf("区块存储失败[%v]\n", blockInfo.Number)
		log.Fatal(err)
	}

	fmt.Printf("区块存储成功[%v]\n", blockInfo.Number)
}

func chcekBlock() (_currentBlockNumber int, _maxBlockNum int) {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Failed to load .env file:", err)
	}

	// DB
	dbase := os.Getenv("DB_DATABASE")
	// prefix := os.Getenv("DB_PREFIX")
	username := os.Getenv("DB_USERNAME")
	password := os.Getenv("DB_PASSWORD")
	port := os.Getenv("DB_PORT")
	host := os.Getenv("DB_HOST")
	// Contract
	url := os.Getenv("RPC_URL")

	// 数据库连接
	dsn := username + ":" + password + "@tcp" + "(" + host + ":" + port + ")/" + dbase
	db, err := sql.Open("mysql", dsn)
	if err != nil {
		panic(err.Error())
	}
	defer db.Close()

	// 获取最新区块高度

	// 构建请求体
	requestData := JSONRPCRequest{
		Jsonrpc: "2.0",
		Method:  "getBlockNumber",
		Params: []interface{}{
			"group0",
			"",
		},
		Id: 1,
	}
	requestBody, err := json.Marshal(requestData)
	if err != nil {
		fmt.Println("Failed to marshal request data:", err)
		return
	}

	// 发送 POST 请求
	response, err := http.Post(url, "application/json", bytes.NewBuffer(requestBody))
	if err != nil {
		fmt.Println("Failed to send request:", err)
		return
	}
	defer response.Body.Close()

	// 读取响应数据
	responseBody, err := ioutil.ReadAll(response.Body)
	if err != nil {
		fmt.Println("Failed to read response body:", err)
		return
	}

	// 解析响应数据
	var jsonResponse JSONRPCResponse
	err = json.Unmarshal(responseBody, &jsonResponse)
	if err != nil {
		fmt.Println("Failed to unmarshal response body:", err)
		return
	}
	currentBlockNumberString := string(jsonResponse.Result)
	num, err := strconv.Atoi(currentBlockNumberString)
	if err != nil {
		fmt.Println("转换失败:", err)
		return
	}
	currentBlockNumber := num
	// fmt.Println("block number", currentBlockNumber)
	// 获取数据库最新高度
	// 查询最大的 block_num 值
	var maxBlockNum int
	err = db.QueryRow("SELECT COALESCE(MAX(block_num), 0) FROM bc_block_number").Scan(&maxBlockNum)
	if err != nil {
		panic(err.Error())
	}
	// fmt.Println("最大的 block_num 值为:", maxBlockNum)
	return currentBlockNumber, maxBlockNum
}

func synTransReceipt(tran_hash string) {

	err := godotenv.Load()
	if err != nil {
		log.Fatal("Failed to load .env file:", err)
	}

	// DB
	dbase := os.Getenv("DB_DATABASE")
	// prefix := os.Getenv("DB_PREFIX")
	username := os.Getenv("DB_USERNAME")
	password := os.Getenv("DB_PASSWORD")
	port := os.Getenv("DB_PORT")
	host := os.Getenv("DB_HOST")
	// Contract
	rpcUrl := os.Getenv("RPC_URL")
	abiStr := os.Getenv("CONTRACT_ABI")
	contractAddress := os.Getenv("CONTRACT_ADDRESS")
	contractMethodId := os.Getenv("CONTRACT_METHOD_SHARADATE")

	// 数据库连接
	dsn := username + ":" + password + "@tcp" + "(" + host + ":" + port + ")/" + dbase
	db, err := sql.Open("mysql", dsn)
	if err != nil {
		panic(err.Error())
	}
	defer db.Close()

	// 加载合约
	abi, err := abi.JSON(strings.NewReader(abiStr))
	if err != nil {
		fmt.Println("加载合约失败")
		log.Fatal(err)
	}

	// 构建请求体
	requestData := JSONRPCRequest{
		Jsonrpc: "2.0",
		Method:  "getTransactionReceipt",
		Params: []interface{}{
			"group0",
			"",
			tran_hash,
			false,
		},
		Id: 1,
	}
	requestBody, err := json.Marshal(requestData)
	if err != nil {
		fmt.Println("构建请求体失败", err)
		return
	}

	// 发送 POST 请求
	response, err := http.Post(rpcUrl, "application/json", bytes.NewBuffer(requestBody))
	if err != nil {
		fmt.Println("Failed to send request:", err)
		return
	}
	defer response.Body.Close()

	// 读取响应数据
	responseBody, err := ioutil.ReadAll(response.Body)
	if err != nil {
		fmt.Println("Failed to read response body:", err)
		return
	}

	// 解析响应数据
	var jsonResponse JSONRPCResponse
	err = json.Unmarshal(responseBody, &jsonResponse)
	if err != nil {
		fmt.Println("Failed to unmarshal response body:", err)
		return
	}
	var transactionReceipt TransactionReceipt
	err = json.Unmarshal(jsonResponse.Result, &transactionReceipt)
	if err != nil {
		fmt.Println("Failed to unmarshal result field:", err)
		return
	}
	// 解码output
	decode_output := ""
	method_id := ""
	if transactionReceipt.To == contractAddress {
		// 获取合约方法id
		method_id = transactionReceipt.Input[2:10]
		decodedSig, err := hex.DecodeString(method_id)
		if err != nil {
			log.Fatal(err)
		}
		if method_id == contractMethodId {
			// 加载合约方法
			method, err := abi.MethodById(decodedSig)
			if err != nil {
				log.Fatal(err)
			}
			decodedOutputData, err := hex.DecodeString(transactionReceipt.Output[2:])
			if err != nil {
				log.Fatal(err)
			}
			re, err := method.Outputs.Unpack(decodedOutputData)
			if err != nil {
				fmt.Printf("解码失败：%v\n", err)
				return
			}
			jsonData, err := json.Marshal(re)
			if err != nil {
				// fmt.Printf("转换为JSON失败：%v\n", err)
				log.Fatal(err)
			}
			decode_output = string(jsonData)
		}

	}

	// 更新信息
	_, err = db.Exec("UPDATE bc_block_transactions SET output = ?, decode_output = ?, status = ?, gas_used = ? WHERE trans_hash = ?",
		transactionReceipt.Output, decode_output, transactionReceipt.Status, transactionReceipt.GasUsed, transactionReceipt.Hash)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("更新交易回执成功[%v]", transactionReceipt.Hash)
}
